{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_ENDPOINT","storiesReducer","state","action","type","isLoading","isError","data","payload","filter","story","objectID","Error","SearchForm","searchTerm","onSearchInput","onSearchSubmit","onSubmit","className","id","value","isFocused","onInputChange","disabled","InputWithLabel","children","inputRef","React","useRef","useEffect","current","focus","htmlFor","ref","onChange","List","list","onRemoveItem","map","item","key","Item","moment","Date","created_at","format","href","url","title","author","num_comments","points","onClick","App","initialState","useState","localStorage","getItem","setValue","setItem","useSemiPersistentState","setSearchTerm","setUrl","useReducer","stories","dispatchStories","handleFetchStories","useCallback","a","axios","get","result","hits","event","target","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04740cba.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './tailwind.generated.css';\nimport moment from \"moment\";\n\nconst API_ENDPOINT = 'https://hn.algolia.com/api/v1/search?query=';\n\nconst useSemiPersistentState = (key, initialState) => {\n  const [value, setValue] = React.useState(\n    localStorage.getItem(key) || initialState\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(key, value);\n  }, [value, key]);\n\n  return [value, setValue];\n};\n\nconst storiesReducer = (state, action) => {\n  switch (action.type) {\n    case 'STORIES_FETCH_INIT':\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case 'STORIES_FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'STORIES_FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    case 'REMOVE_STORY':\n      return {\n        ...state,\n        data: state.data.filter(\n          story => action.payload.objectID !== story.objectID\n        ),\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useSemiPersistentState(\n    'search',\n    'React'\n  );\n\n  const [url, setUrl] = React.useState(\n    `${API_ENDPOINT}${searchTerm}`\n  );\n\n  const [stories, dispatchStories] = React.useReducer(\n    storiesReducer,\n    { data: [], isLoading: false, isError: false }\n  );\n\n  const handleFetchStories = React.useCallback(async () => {\n    dispatchStories({ type: 'STORIES_FETCH_INIT' });\n\n    try {\n      const result = await axios.get(url);\n\n      dispatchStories({\n        type: 'STORIES_FETCH_SUCCESS',\n        payload: result.data.hits,\n      });\n    } catch {\n      dispatchStories({ type: 'STORIES_FETCH_FAILURE' });\n    }\n  }, [url]);\n\n  React.useEffect(() => {\n    handleFetchStories();\n  }, [handleFetchStories]);\n\n  const handleRemoveStory = item => {\n    dispatchStories({\n      type: 'REMOVE_STORY',\n      payload: item,\n    });\n  };\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleSearchSubmit = event => {\n    setUrl(`${API_ENDPOINT}${searchTerm}`);\n\n    event.preventDefault();\n  };\n\n  return (\n    <div className={\"container mx-auto pt-10\"}>\n      <h1 className={\"text-center text-6xl\"}>Hacker News</h1>\n\n      <SearchForm\n        searchTerm={searchTerm}\n        onSearchInput={handleSearchInput}\n        onSearchSubmit={handleSearchSubmit}\n      />\n      <div className={\"grid grid-cols-3 gap-4\"}>\n        {stories.isError && <p>Something went wrong ...</p>}\n\n        {stories.isLoading ? (\n          <p>Loading ...</p>\n        ) : (\n          <List list={stories.data} onRemoveItem={handleRemoveStory} />\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nconst SearchForm = ({\n  searchTerm,\n  onSearchInput,\n  onSearchSubmit,\n}) => (\n  <form onSubmit={onSearchSubmit} className={\"w-full my-10\"}>\n    <div className={\"md:flex md:items-center flex-wrap justify-between\"}>\n    <InputWithLabel\n      id=\"search\"\n      value={searchTerm}\n      isFocused\n      onInputChange={onSearchInput}\n    >\n      <strong>Search:</strong>\n    </InputWithLabel>\n\n    <button className={\"md:w-1/6 bg-red-500 hover:bg-red-300 focus:shadow-outline focus:outline-none text-white font-bold py-3 px-4 rounded\"} type=\"submit\" disabled={!searchTerm}>\n      Submit\n    </button>\n    </div>\n\n  </form>\n);\n\nconst InputWithLabel = ({\n  id,\n  value,\n  type = 'text',\n  onInputChange,\n  isFocused,\n  children,\n}) => {\n  const inputRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      inputRef.current.focus();\n    }\n  }, [isFocused]);\n\n  return (\n    <>\n      <label className={\"block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2 w-full\"} htmlFor={id}>{children}</label>\n      <input\n        ref={inputRef}\n        id={id}\n        type={type}\n        value={value}\n        onChange={onInputChange}\n        className={\"w-4/5 appearance-none block bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"}\n      />\n    </>\n  );\n};\n\nconst List = ({ list, onRemoveItem }) => \n\n  list.map(item => (\n    <Item\n      key={item.objectID}\n      item={item}\n      onRemoveItem={onRemoveItem}\n    />\n  ));\n\nconst Item = ({ item, onRemoveItem }) => (\n  <div className={\"max-w-sm rounded overflow-hidden shadow-lg px-6 py-4 flex flex-col\"}>\n    <div className={\"text-sm text-gray-600 mb-2\"}>{moment(new Date(item.created_at)).format(\"LL\")}</div>\n    <div className={\"text-2xl font-semibold text-gray-800 mb-4\"}>\n      <a href={item.url}>{item.title}</a>\n    </div>\n    <div className={\"mb-2 text-sm text-gray-600\"}>By {item.author}</div>\n    <div className={\"mb-2 text-sm text-gray-600\"}>{item.num_comments} comments</div>\n    <div className={\"mb-10 text-sm text-gray-600\"}>{item.points} points</div>\n    <div className={\"text-center mt-auto grid grid-flow-col gap-4\"}>\n      <a className={\"bg-purple-800 hover:bg-purple-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded\"} href={item.url}>Read</a>\n      <button className={\"bg-transparent hover:bg-purple-400 text-purple-800 font-semibold hover:text-white py-2 px-4 border border-purple-800 hover:border-transparent rounded\"} type=\"button\" onClick={() => onRemoveItem(item)}>\n        Dismiss\n      </button>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './tailwind.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}